-- Authors: Spencer Hirsch, shirsch2020@my.fit.edu
--          Tyler Gutowski, tgutowski2020@my.fit.edu
-- Course:  CSE 4250, Fall 2022
-- Project: Project 3, Can you HEAR me now?

WITH ADA.CONTAINERS.DOUBLY_LINKED_LISTS;
WITH ADA.CONTAINERS.VECTORS;
WITH ADA.STRINGS.UNBOUNDED; USE ADA.STRINGS.UNBOUNDED;

PROCEDURE GRAPH_INTERSECTION(INITIAL : STRING; CONNECTED : STRING; DETERMINANT : STRING) IS
	
	TYPE TOWERS IS RECORD; RECORD END;
	TYPE TOWERS_ACCESS IS ACCESS TOWERS;
	
	PACKAGE LINKS IS NEW ADA.CONTAINERS.DOUBLY_LINKED_LISTS(TOWERS_ACCESS);
	USE LINKS;
	
	TYPE TOWERS IS RECORD
		SOURCE : STRING;
		LINK : LIST;
	END RECORD;
	
	ADJ_LIST : LIST;
	TOWER : TOWER;

	FUNCTION CONNECTION_EXISTS(INITIAL : STRING; CONNECTED ; STRING) IS
		DOES_EXIST : BOOLEAN := FALSE;
	BEGIN
		-- SEARCH THE STRUCTURE TO SEE IF THE CONNECTION EXISTS
		RETURN DOES_EXIST;
	END CONNECTION_EXISTS;

	PROCEDURE OUTPUT(INITIAL : STRING; CONNECTED : STRING) IS
		DOES_EXIST : BOOLEAN;
		OUTPUT_STRING : STRING := INITIAL & " " & CONNECTED;  
	BEGIN
		DOES_EXIST := CONNECTION_EXISTS(INITIAL, CONNECTED);
		IF DOES_COMMENT_EXIST THEN
			ADA.TEXT_IO.PUT_LINE("+ " & NATURAL'IMAGE(OUTPUT_STRING));
		ELSE
			ADA.TEXT_IO.PUT_LINE("- " & NATURAL'IMAGE(OUTPUT_STRING));
		END IF;
	END OUTPUT;
	NODE : TOWERS_ACCESS;
BEGIN
	IF DETERMINANT = "QUERY" THEN
		OUTPUT(INITIAL, CONNECTED);
	ELSE
		NODE.SOURCE := INITIAL;
		NODE.LINK.

		-- MAKE CONNECTIONS
	END IF;
END GRAPH_INTERSECTION;
